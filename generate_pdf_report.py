#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —á–∞—Ç–æ–≤ –±–æ—Ç–∞.
–°–æ–∑–¥–∞–µ—Ç PDF —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
"""

import os
import json
import re
from datetime import datetime
from pathlib import Path
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER
from reportlab.pdfbase import pdfutils
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics


def register_fonts():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        font_paths = [
            '/System/Library/Fonts/Arial.ttf',  # macOS
            '/System/Library/Fonts/Helvetica.ttc',  # macOS
            'C:/Windows/Fonts/arial.ttf',  # Windows
            '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',  # Linux
        ]
        
        for font_path in font_paths:
            if os.path.exists(font_path):
                try:
                    pdfmetrics.registerFont(TTFont('CustomFont', font_path))
                    return 'CustomFont'
                except:
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
        return 'Helvetica'
    except:
        return 'Helvetica'


def clean_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', text)
    # –ó–∞–º–µ–Ω—è–µ–º HTML entities
    text = text.replace('&amp;', '&')
    text = text.replace('&lt;', '<')
    text = text.replace('&gt;', '>')
    text = text.replace('&quot;', '"')
    text = text.replace('&#39;', "'")
    return text


def load_chat_files(chats_dir: str) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã —á–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è"""
    chat_files = []
    
    if not os.path.exists(chats_dir):
        print(f"–ü–∞–ø–∫–∞ {chats_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return []
    
    for filename in os.listdir(chats_dir):
        if filename.endswith('.json') and filename.startswith('chat_'):
            filepath = os.path.join(chats_dir, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                if data.get('messages'):
                    first_timestamp = data['messages'][0].get('timestamp', '')
                    chat_files.append({
                        'filename': filename,
                        'filepath': filepath,
                        'data': data,
                        'first_timestamp': first_timestamp
                    })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_files.sort(key=lambda x: x['first_timestamp'])
    return chat_files


def format_timestamp(timestamp_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M:%S')
    except:
        return timestamp_str


def create_styles(font_name: str):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    styles = getSampleStyleSheet()
    
    # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
    chat_title_style = ParagraphStyle(
        'ChatTitle',
        parent=styles['Heading1'],
        fontName=font_name,
        fontSize=16,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor='#2E86AB'
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø—Ä–∞–≤–∞)
    user_message_style = ParagraphStyle(
        'UserMessage',
        parent=styles['Normal'],
        fontName=font_name,
        fontSize=11,
        alignment=TA_RIGHT,
        leftIndent=4*cm,
        rightIndent=0.5*cm,
        spaceBefore=8,
        spaceAfter=8,
        borderWidth=1,
        borderColor='#E3F2FD',
        backColor='#E3F2FD',
        borderPadding=8,
        borderRadius=8
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Å–ª–µ–≤–∞)
    assistant_message_style = ParagraphStyle(
        'AssistantMessage',
        parent=styles['Normal'],
        fontName=font_name,
        fontSize=11,
        alignment=TA_LEFT,
        leftIndent=0.5*cm,
        rightIndent=4*cm,
        spaceBefore=8,
        spaceAfter=8,
        borderWidth=1,
        borderColor='#F3E5F5',
        backColor='#F3E5F5',
        borderPadding=8,
        borderRadius=8
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    timestamp_style = ParagraphStyle(
        'Timestamp',
        parent=styles['Normal'],
        fontName=font_name,
        fontSize=8,
        textColor='#666666',
        spaceBefore=2,
        spaceAfter=6
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    system_message_style = ParagraphStyle(
        'SystemMessage',
        parent=styles['Normal'],
        fontName=font_name,
        fontSize=10,
        alignment=TA_CENTER,
        textColor='#888888',
        spaceBefore=8,
        spaceAfter=8,
        fontStyle='italic'
    )
    
    return {
        'chat_title': chat_title_style,
        'user_message': user_message_style,
        'assistant_message': assistant_message_style,
        'timestamp': timestamp_style,
        'system_message': system_message_style
    }


def generate_pdf_report(chats_dir: str = 'chats', output_file: str = 'chat_report.pdf'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
    
    print("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –æ—Ç—á–µ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
    font_name = register_fonts()
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç: {font_name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —á–∞—Ç–æ–≤
    chat_files = load_chat_files(chats_dir)
    if not chat_files:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_files)} —Ñ–∞–π–ª–æ–≤ —á–∞—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
    doc = SimpleDocTemplate(
        output_file,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
    styles = create_styles(font_name)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    title = Paragraph(
        f"–û—Ç—á–µ—Ç –ø–æ –¥–∏–∞–ª–æ–≥–∞–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞<br/>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
        styles['chat_title']
    )
    story.append(title)
    story.append(Spacer(1, 1*cm))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —á–∞—Ç–∞
    for i, chat_file in enumerate(chat_files):
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i+1}/{len(chat_files)}: {chat_file['filename']}")
        
        data = chat_file['data']
        chat_id = data.get('chat_id', 'Unknown')
        messages = data.get('messages', [])
        
        if not messages:
            continue
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        chat_title = Paragraph(
            f"–ß–∞—Ç {chat_id} ({chat_file['filename']})",
            styles['chat_title']
        )
        story.append(chat_title)
        story.append(Spacer(1, 0.5*cm))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages:
            role = msg.get('role', '')
            content = msg.get('content', '')
            timestamp = msg.get('timestamp', '')
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
            clean_content = clean_text(content)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not clean_content.strip():
                continue
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timestamp
            formatted_time = format_timestamp(timestamp)
            
            if role == 'user':
                # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø—Ä–∞–≤–∞)
                timestamp_para = Paragraph(
                    f"üë§ –ü—Å–∏—Ö–æ–ª–æ–≥ - {formatted_time}",
                    styles['timestamp']
                )
                timestamp_para.hAlign = 'RIGHT'
                story.append(timestamp_para)
                
                message_para = Paragraph(clean_content, styles['user_message'])
                story.append(message_para)
                
            elif role == 'assistant':
                # –°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Å–ª–µ–≤–∞)
                timestamp_para = Paragraph(
                    f"ü§ñ –ö–ª–∏–µ–Ω—Ç - {formatted_time}",
                    styles['timestamp']
                )
                timestamp_para.hAlign = 'LEFT'
                story.append(timestamp_para)
                
                message_para = Paragraph(clean_content, styles['assistant_message'])
                story.append(message_para)
                
            elif role == 'system':
                # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if '–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞' not in content:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ
                    system_para = Paragraph(
                        f"üîß –°–∏—Å—Ç–µ–º–∞ - {formatted_time}: {clean_content}",
                        styles['system_message']
                    )
                    story.append(system_para)
            
            story.append(Spacer(1, 0.2*cm))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if i < len(chat_files) - 1:
            story.append(PageBreak())
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    print("–°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª...")
    doc.build(story)
    print(f"PDF –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∏–∑ —á–∞—Ç–æ–≤ –±–æ—Ç–∞')
    parser.add_argument('--chats-dir', default='chats', help='–ü–∞–ø–∫–∞ —Å JSON —Ñ–∞–π–ª–∞–º–∏ —á–∞—Ç–æ–≤')
    parser.add_argument('--output', default='chat_report.pdf', help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞')
    
    args = parser.parse_args()
    
    try:
        generate_pdf_report(args.chats_dir, args.output)
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
